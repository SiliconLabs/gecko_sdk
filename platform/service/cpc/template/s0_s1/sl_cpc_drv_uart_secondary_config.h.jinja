#ifndef SL_CPC_DRV_UART_PRIMARY_CONFIG_H
#define SL_CPC_DRV_UART_PRIMARY_CONFIG_H
{% for instance in cpc_secondary_uart_instance %} 
#include "sl_cpc_drv_uart_secondary_{{ instance }}_config.h"

#define usartHwFlowControlNone_D         0
#define usartHwFlowControlCtsAndRts_D    1

#define CAT(a,...) CAT_IMPL(a, __VA_ARGS__)
#define CAT_IMPL(a,...) a ## __VA_ARGS__

#define SL_CPC_DRV_UART_RX_QUEUE_SIZE                SL_CPC_DRV_UART_{{ instance | upper }}_RX_QUEUE_SIZE
#define SL_CPC_DRV_UART_TX_QUEUE_SIZE                SL_CPC_DRV_UART_{{ instance | upper }}_TX_QUEUE_SIZE
#define SL_CPC_DRV_UART_BAUDRATE                     SL_CPC_DRV_UART_{{ instance | upper }}_BAUDRATE

#if !defined(SL_CPC_DRV_UART_{{ instance | upper }}_FLOW_CONTROL_TYPE)
#define SL_CPC_DRV_UART_FLOW_CONTROL_TYPE usartHwFlowControlNone_D
#else
#define FC_USER_VAL CAT(SL_CPC_DRV_UART_{{ instance | upper }}_FLOW_CONTROL_TYPE, _D)
#define SL_CPC_DRV_UART_FLOW_CONTROL_TYPE  FC_USER_VAL
#endif

#if ((SL_CPC_DRV_UART_FLOW_CONTROL_TYPE != usartHwFlowControlNone_D) && (SL_CPC_DRV_UART_FLOW_CONTROL_TYPE != usartHwFlowControlCtsAndRts_D))
#error Invalid Flow control value
#endif

#if !defined(SL_CPC_DRV_UART_{{ instance | upper }}_CTS_PORT)
#define SL_CPC_DRV_UART_CTS_PORT 0
#else
#define SL_CPC_DRV_UART_CTS_PORT SL_CPC_DRV_UART_{{ instance | upper }}_CTS_PORT
#endif

#if !defined(SL_CPC_DRV_UART_{{ instance | upper }}_CTS_PIN)
#define SL_CPC_DRV_UART_CTS_PIN 0
#else
#define SL_CPC_DRV_UART_CTS_PIN SL_CPC_DRV_UART_{{ instance | upper }}_CTS_PIN
#endif

#if !defined(SL_CPC_DRV_UART_{{ instance | upper }}_CTS_LOC)
#define SL_CPC_DRV_UART_CTS_LOC 0
#else
#define SL_CPC_DRV_UART_CTS_LOC SL_CPC_DRV_UART_{{ instance | upper }}_CTS_LOC
#endif

#if !defined(SL_CPC_DRV_UART_{{ instance | upper }}_RTS_PORT)
#define SL_CPC_DRV_UART_RTS_PORT 0
#else
#define SL_CPC_DRV_UART_RTS_PORT SL_CPC_DRV_UART_{{ instance | upper }}_RTS_PORT
#endif

#if !defined(SL_CPC_DRV_UART_{{ instance | upper }}_RTS_PIN)
#define SL_CPC_DRV_UART_RTS_PIN 0
#else
#define SL_CPC_DRV_UART_RTS_PIN SL_CPC_DRV_UART_{{ instance | upper }}_RTS_PIN
#endif

#if !defined(SL_CPC_DRV_UART_{{ instance | upper }}_RTS_LOC)
#define SL_CPC_DRV_UART_RTS_LOC 0
#else
#define SL_CPC_DRV_UART_RTS_LOC SL_CPC_DRV_UART_{{ instance | upper }}_RTS_LOC
#endif

#define SL_CPC_DRV_UART_PERIPHERAL                   SL_CPC_DRV_UART_{{ instance | upper }}_PERIPHERAL
#define SL_CPC_DRV_UART_PERIPHERAL_NO                SL_CPC_DRV_UART_{{ instance | upper }}_PERIPHERAL_NO

#define SL_CPC_DRV_UART_TX_PORT                      SL_CPC_DRV_UART_{{ instance | upper }}_TX_PORT
#define SL_CPC_DRV_UART_TX_PIN                       SL_CPC_DRV_UART_{{ instance | upper }}_TX_PIN
#define SL_CPC_DRV_UART_TX_LOC                       SL_CPC_DRV_UART_{{ instance | upper }}_TX_LOC

#define SL_CPC_DRV_UART_RX_PORT                      SL_CPC_DRV_UART_{{ instance | upper }}_RX_PORT
#define SL_CPC_DRV_UART_RX_PIN                       SL_CPC_DRV_UART_{{ instance | upper }}_RX_PIN
#define SL_CPC_DRV_UART_RX_LOC                       SL_CPC_DRV_UART_{{ instance | upper }}_RX_LOC

{% endfor %}
#endif